{"pages":[{"title":"travel","text":"여행 일기를 저장합니다.대만 여행","link":"/travel/index.html"}],"posts":[{"title":"나의 블로그 플랫폼 유랑기","text":"어릴 때부터 저는 제 생각과 좋은 정보를 담은 글을 올릴 블로그 서비스를 찾아, 다양한 블로그 플랫폼을 유랑했습니다. 처음에는 네이버 블로그로 시작했지만 얼마 가지 않아 불편한 UI와 여러가지 제약을 참을 수 없었습니다. 그래서 옮긴 것이 구글 블로거였습니다. 하지만 구글 블로거도 불편하기는 마찬가지였습니다. 특히 기본 주어지는 템플릿이 굉장히 예쁘지 않을 뿐더러, 사진 첨부가 너무나도 불편했습니다. 너비를 자동적으로 페이지에 맞춰 표시해주는 기능이 없어서 많은 사진을 일일이 HTML로 수정해주어야 했지요. 뿐만 아니라 개발자에 길에 들어서며, 알고 있는 지식을 글의 형태로 정리하고 다른 사람들과 공유해야 할 필요성을 느꼈습니다. 항상 문제에 부닺힐 때마다 잘 정리된 블로그에서 도움을 받으며 ‘나도 이런 지식 나눔으로 다른사람에게 도움이 되고 싶다!’라는 마음이 들었죠. 그래서 새로운 블로그 플랫폼을 찾기 시작했습니다. 눈에 들어오는 건 세 가지. 티스토리와 Medium, 그리고 Github Pages였습니다. 먼저 티스토리는 원래 초대장을 받은 사람만 개설할 수 있는, 가입이 폐쇄적인 블로그였지만 작년 10월 22일부로 초대장이 없어도 가입할 수 있게 되었죠. 제가 본 티스토리의 장점과 단점은 다음과 같습니다. 장점 심플하고 예쁜 기본 스킨 무료지만 무제한으로 제공되는 용량 개발자 친화적이며, 다양한 커스터마이징을 지원 단점 티스토리 서비스가 언제 종료될지 모름(카카오의 신뢰성이 낮음). 구시대적인 글 작성 UI 진짜 예쁜 개인 제작 스킨은 결국 유료 단점 1번이 굉장히 중요한 문제점이었기 때문에 결국 티스토리 블로그는 개설만 한 채 방치했습니다. 몇년 전 다음 클라우드나 최근 다음 아고라에 이르기까지, 돈이 되지 않는다면 무조건 서비스를 접고 보는 카카오의 행태는 ‘나의 글을 몇십년이고 기록해 둘 수 있을까?’에 대한 답을 주지 못했습니다. 이게 티스토리를 포기한 결정적인 이유입니다. 다음으로 찾아본 것은 Medium이었습니다. 미디엄은 트위터와 블로거를 창립한 Evan Williams가 2012년에 만든 온라인 출판 플랫폼인데, 컴퓨터공학 전문가들이 걸출한 글을 쓰는 곳으로 유명합니다. 이 서비스의 장점과 단점은 다음과 같습니다. 장점 아름다운 템플릿 코드 스니펫 삽입 지원 훌륭한 글 추천 시스템, 좋은 글 작성으로 수익 창출 가능 단점 한글 폰트가 기본 Serif체로 고정되며, 폰트 수정 불가 수익 모델을 만들지 못해 2017년 뉴욕과 워싱턴 지사를 폐쇄한 적이 있음 미디엄에서 강제되는 명조체는 PC에서 볼 때 굉장히 가독성이 떨어진다는 문제점이 있었습니다. 영어 글의 경우 가독성도 뛰어나고 심미적으로도 아름답지만, 한글의 경우 명조체가 역효과를 냅니다. 또한 미디움은 적절한 수익 모델을 만들지 못해 2017년에 두 지사를 폐쇄하고, 직원의 반을 해고한 적이 있습니다. 즉 ‘이 서비스가 오랫동안 유지될 수 있을까?’에 대한 의구심이 들 수 밖에 없었습니다. 물론 미디움은 지금은 한 달에 글을 몇 개 이상 읽으면, 매달 5달러를 지불하여 글 전체를 다 볼 수 있게 하는 ‘구독형 서비스’로 탈바꿈했습니다. 뉴욕타임즈와 비슷한 방식이죠. 이를 거꾸로 생각해보면, 독자들이 제 글 여러개를 읽고 싶다면 유료 구독을 할 수 밖에 없다는 이야기가 됩니다. 결국 이는 블로그의 확장성을 저하하죠. 이 문제만 해결된다면 아마 미디움으로 이전할 수도 있을 것 같네요. 그래서 마지막으로 찾아본 것은 Github pages였습니다. 요즘 개발자 사이에서 인기가 많은 플랫폼이죠. Github에서 블로그를 만들기 위해서는, Jekyll과 Hexo 등의 같은 정적 사이트 생성기(Static site generator)를 사용하여 ‘github.io’ 도메인을 만들어야 합니다. 처음엔 Jekyll에 도전했지만, 윈도우에서 ruby를 깔기가 굉장히 번거롭더군요. 루비의 하위호환성 문제 때문에 한동안 골머리를 앓다가, Hexo를 발견했습니다. 장점 자바스크립트 기반으로 설치하고 사용하기 매우 쉬움 자유도가 높으며, 커스터마이징이 편리 가입형 블로그의 ‘서비스 종료’문제를 걱정할 필요 없음 마크다운으로 글 작성 가능 다양한 아름다운 무료 템플릿 단점 자유도가 너무나 높아서 JavaScript, CSS, html을 직접 수정해야 함 마크다운 특유의 문제로, 이미지 첨부가 좀 많이 불편함 댓글 시스템인 Disquis가 비개발자에게는 많이 생소함 결국 저는 깃허브 페이지와 Hexo에 정착했습니다. 물론 단점이 존재하긴 하지만, 가입형 블로그의 서비스 종료 문제를 걱정할 필요 없이 나의 글을 저장할 수 있다는 점과 아름다운 무료 템플릿이 많다는 점이 이를 상쇄했습니다. 특히나 Jekyll과 달리 매우매우 간단한 명령어로 나만의 블로그를 업로드할 수 있다는 점이 매력적이었습니다. 저는 앞으로 당분간 이 Hexo를 활용하여 제 블로그 생활을 지속할 것 같네요. 블로그 선택에 고민하시는 (개발자) 분들께 이 포스팅이 조금이라도 도움이 되었다면 좋겠습니다.","link":"/2019/02/21/나의-블로그-플랫폼-유랑기/"},{"title":"Google Cloud Platform으로 fast.ai 입문하기","text":"‘누구나 쉽게 다가갈 수 있는 딥러닝’을 추구하며 혜성처럼 등장한 딥러닝 라이브러리 fast.ai. 이 포스트는 fast.ai에서 제공하는 Practical Deep Learning for Coders, v3 강좌를 듣기 위해 필요한 준비를 설명한 후, 강의 내용을 꼼꼼히 정리하는 시리즈가 될 예정입니다. GPU 사용하기딥러닝 모델을 돌리기 위해서는 CPU뿐만 아니라 좋은 GPU가 필수적입니다. 특히 Tensorflow, Pytorch, fast.ai와 같은 파이썬의 유명 딥러닝 라이브러리들은 모두 NVIDIA사의 GPU를 필요로 합니다. 물론 이미 좋은 NVIDIA사의 그래픽카드를 갖고 계신 분들도 있겠지만, fast.ai에서는 그래픽카드가 있어도 클라우드 서버의 GPU를 사용할 것을 권장합니다. 주피터 노트북과 CUDA를 설치하는 데에 시간이 많이 걸릴 뿐만 아니라, 과정이 복잡하기 때문이죠. 그래서 우선 필요한 모든 것들이 이미 설치되어 있는 클라우드 컴퓨터를 빌린 후, 모든 에너지를 딥러닝 학습에 쏟아붓는 것을 추천하는 것입니다. fast.ai 강좌 홈페이지에서는 이러한 클라우드 서비스를 여럿 소개하고 있습니다. 딥러닝 모델을 돌려보셨던 분들이라면 한번 쯤 써 보셨을 구글 Colab도 이 중 하나죠. 구글 Colab은 무료이지만, 세션에 따라 그래픽카드인 K80이 제 성능을 내지 못한다는 이야기가 많아 제외하도록 하겠습니다. 홈페이지를 보면 Crestle, Kaggle Kernels, Salamander, Google Compute Paltform, Azure, AWS… 수많은 선택지들이 있는데, 그 중 저는 GCP(Google Compute Platform)을 선택했습니다. 왜 GCP인가?Google Compute Platform은 물론 커맨드 라인을 입력해 설치해야 하는 번거로움은 있지만, 다른 유료 서비스에 비해 다음과 같은 장점이 있습니다. 300달러의 무료 크레딧을 준다! fast.ai 강좌를 듣고 프로젝트를 해도 크레딧으로 충분히 사용할 수 있다. 모든 것이 미리 설치되어 있어 기본적인 커맨드 라인만 입력하면 어느 컴퓨터에서도 사용할 수 있다. Colab의 K80 GPU에 비해 훨씬 빠른 P4 GPU로 traning time을 줄일 수 있다. 네, 사실 첫번째 장점이 제일 큽니다. GCP의 가격GCP는 CPU와 GPU 따로 가격을 합산하여 청구합니다. Standard Compute(P4 GPU)와 Budget Compute(K80 GPU)라는 두 가지 옵션이 제공되는데, 전자의 경우는 1시간마다 $0.38, 후자는 1시간마다 $0.23입니다. 거기에 기본 옵션인 200GB 스토리지를 사용하려면 달마다 $9.60을 추가로 내야 합니다. 하지만 다행히도 fast.ai 공부를 위해 GCP를 200시간정도 사용하더라도 청구되는 요금은 Standard Compute 기준 약 $100으로, GCP 크레딧($300)의 1/3밖에 들지 않습니다. 따라서 fast.ai에서는 Standard Compute 플랜으로 돈 아끼지 말고 공부할 것을 추천합니다. 1. 계정 생성구글 클라우드 홈페이지에서 계정을 만듭니다. 계정을 생성하면 300달러어치의 크레딧을 제공합니다. 2. GCP 설치fast.ai GCP 설치 페이지에서는 윈도우에서 우분투 터미널을 사용해 설치할 것을 권하고 있지만, 추천하지 않습니다. GCP 공식 홈페이지에서는 다양한 운영체제에 대한 설치법을 안내하고 있으니, 윈도우 이외의 OS를 쓰시는 분들께서는 이 문서를 참조하셔서 설치하세요. 이 단락은 윈도우에서 설치하는 방법을 안내합니다. 구글 클라우드 SDK을 내려받아 설치 설치가 끝나면 다음과 같이 체크 항목이 뜨는데, 모두 체크해주세요. 바탕화면의 Google Cloud SDK Shell을 클릭, 터미널에 진입합니다. 3. GCP 초기화터미널에서 다음 문구를 입력하여 GCP SDK를 초기화합니다. 1gcloud init 입력했다면 아래의 메세지가 뜹니다. 1To continue, you must log in. Would you like to log in (Y/n)? y를 눌러 브라우저를 통해 구글 아이디로 로그인합니다. 만약 기존에 GCP에서 프로젝트를 만든 적이 있다면, 다음과 같이 기존 프로젝트 중에서 하나를 선택하라는 메세지가 나타납니다. 프로젝트가 하나밖에 없다면 gcloud init 이 자동적으로 해당 프로젝트를 선택합니다. 12345Pick cloud project to use: [1] [my-project-1] [2] [my-project-2] ... Please enter your numeric choice: 번호를 입력하여 프로젝트를 선택합니다. 물론 여기서 새로운 프로젝트를 생성할 수도 있습니다. 마지막으로 Compute Engine 지역을 정하는 메세지가 나타납니다.123456Which compute zone would you like to use as project default? [1] [asia-east1-a] [2] [asia-east1-b] ... [14] Do not use default zone Please enter your numeric choice: 적당히 정하면 되는데, 저는 us-west1-b를 선택했습니다. 성공적으로 지금까지 따라오셨다면, 터미널에 다음과 같은 메세지가 보일 것입니다.1234567Your Google Cloud SDK is configured and ready to use!* Commands that require authentication will use your.email@gmail.com by default* Commands will reference project `my-project-1` by defaultRun `gcloud help config` to learn how to change individual settingsThis gcloud configuration is called [default]. 4. 인스턴스 생성터미널에 다음과 같이 입력합니다. 만약 Standard Compute가 아닌 Budget Compute 플랜을 사용하고 싶다면, “n1-highmem-8” 대신 “n1-highmem-4”를, “type=nvidia-tesla-p4,count=1” 대신 “type=nvidia-tesla=k80,count=1”을 입력합니다. 1gcloud compute instances create \"my-fastai-instance\" --zone=\"us-west2-b\" --image-family=\"pytorch-latest-gpu\" --image-project=deeplearning-platform-release --maintenance-policy=TERMINATE --accelerator=\"type=nvidia-tesla-p4,count=1\" --machine-type=\"n1-highmem-8\" --boot-disk-size=200GB --metadata=\"install-nvidia-driver=True\" --preemptible 여기서 만약 다음과 같은 에러가 뜬다면, GPU 할당량을 변경해야 합니다. 12ERROR: (gcloud.compute.instances.create) Could not fetch resource: - Quota 'GPUS_ALL_REGIONS' exceeded. Limit: 0.0 globally. 구글 클라우드 할당량 페이지로 갑니다. 무료 계정이라면, 유료 계정으로 업그레이드해야 합니다. 걱정하지 마세요! 300달러의 크레딧이 사라지거나 하지는 않으니까요. 필터에서 Compute Engine, GPUs(all regions)를 선택합니다. my-fastai-instance의 할당량을 클릭하여 0에서 1로 조정합니다. 변경 목적을 물어보는 란에는 영어로 적당히 입력합니다. 2영업일 걸린다고 하는데, 친절한 구글 담당자가 20분 안에 승인해줍니다. 콘솔 페이지에서 인스턴스가 제대로 생성되었는지 확인하세요. 인스턴스 이름 왼쪽 아이콘이 회색이면 꺼진 상태, 녹색이면 켜진 상태입니다. 모두 정상적으로 진행되었다면, 터미널에서 다음과 같이 입력하여 인스턴스에 연결합니다. 이 명령어는 인스턴스를 실행할 때마다 써야하니 메모장에 복사해 두세요!! 1gcloud compute ssh --zone=\"us-west2-b\" jupyter@\"my-fastai-instance\" -- -L 8080:localhost:8080 SSH 키를 생성한다는 문구가 나올텐데, ‘예’를 누르고 넘어갑니다. 지금까지 아무런 문제가 없었다면, 브라우저 주소창에 localhost:8080/tree를 입력해보세요. 익숙한 jupyter notebook 환경이 등장합니다. 축하해요! 여기서 localhost:8080이 아닌, localhost:8080/tree를 입력해야 하는 이유는, tree를 입력하지 않을 경우 JupyterLab이라는 프로그램으로 연결되기 때문입니다. 평소에 localhost:8080으로 컴퓨터의 주피터 노트북을 사용하셨던 분들은 주의하세요. 5. fast.ai 자료 다운로드 및 업데이트윈도우에서 진행하셨던 분들은, 저번 단계가 완료되면 Putty란 프로그램이 같이 실행될 겁니다. 1jupyter@my-fastai-instance: Putty의 CLI실행창에는 위와 같은 문구가 있을텐데, 다음 명령어를 입력해 주세요. 깃허브의 fast.ai 라이브러리를 가져와서 실습할 준비를 하기 위해서입니다. 123cd tutorials/fastai/course-v3git checkout .git pull 이후, 다음과 같은 명령어를 입력해서 fastai 라이브러리를 최신 업데이트 해주세요. 1sudo /opt/anaconda3/bin/conda install -c fastai fastai 완료가 되면 주피터 노트북을 새로고침하세요. course-v3이라는 폴더가 생긴 것을 확인할 수 있습니다. 6. [주의!] 인스턴스 정지자리를 비우는 등 주피터 노트북을 사용하지 않는다면, 반드시 인스턴스를 정지하세요!!!!! 딥러닝 모델을 돌리고 있지 않는 ‘idle’상태여도 실행되고 있는 인스턴스에 대한 가격은 청구됩니다. 인스턴스를 정지하는 것을 잊어버린다면 엄청난 요금 폭탄이 청구되니, 항상 쓰지 않을 때마다 콘솔 페이지에서 정지 버튼을 눌러 인스턴스를 정지하세요. 다음 글에서는 fast.ai 강좌를 한국어로 요약한 내용을 연재할 예정입니다.","link":"/2019/04/03/fast-ai입문/"},{"title":"Hexo 폰트 변경하기(Icarus 테마)","text":"Hexo 블로그 폰트 변경head.ejs 변경_variables.styl 변경style.styl 변경1family-sans = \"Noto Sans KR\", \"Ubuntu\", \"Roboto\", \"Open Sans\", \"Microsoft YaHei\", sans-serif","link":"/2019/02/25/Hexo-Icarus-템플릿-폰트-변경하기/"}],"tags":[{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"fast-ai, 딥러닝","slug":"fast-ai-딥러닝","link":"/tags/fast-ai-딥러닝/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"}],"categories":[{"name":"Hexo & 블로그","slug":"Hexo-블로그","link":"/categories/Hexo-블로그/"},{"name":"fast-ai","slug":"fast-ai","link":"/categories/fast-ai/"}]}